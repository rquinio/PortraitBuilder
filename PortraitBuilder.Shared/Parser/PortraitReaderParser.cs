/*
 * WARNING: this file has been generated by
 * Hime Parser Generator 2.0.5.0
 */
using System.Collections.Generic;
using Hime.Redist;
using Hime.Redist.Parsers;

namespace PortraitBuilder.Parser
{
	/// <summary>
	/// Represents a parser
	/// </summary>
	internal class PortraitReaderParser : LRkParser
	{
		/// <summary>
		/// The automaton for this parser
		/// </summary>
		private static readonly LRkAutomaton commonAutomaton = LRkAutomaton.Find(typeof(PortraitReaderParser), "PortraitReaderParser.bin");
		/// <summary>
		/// Contains the constant IDs for the variables and virtuals in this parser
		/// </summary>
		public class ID
		{
			/// <summary>
			/// The unique identifier for variable operator
			/// </summary>
			public const int _operator = 0x0017;
			/// <summary>
			/// The unique identifier for variable idOption
			/// </summary>
			public const int idOption = 0x0018;
			/// <summary>
			/// The unique identifier for variable boolOption
			/// </summary>
			public const int boolOption = 0x0019;
			/// <summary>
			/// The unique identifier for variable stringOption
			/// </summary>
			public const int stringOption = 0x001A;
			/// <summary>
			/// The unique identifier for variable numberOption
			/// </summary>
			public const int numberOption = 0x001B;
			/// <summary>
			/// The unique identifier for variable groupOption
			/// </summary>
			public const int groupOption = 0x001C;
			/// <summary>
			/// The unique identifier for variable colourGroup
			/// </summary>
			public const int colourGroup = 0x001D;
			/// <summary>
			/// The unique identifier for variable layerGroup
			/// </summary>
			public const int layerGroup = 0x001E;
			/// <summary>
			/// The unique identifier for variable cultureGroup
			/// </summary>
			public const int cultureGroup = 0x001F;
			/// <summary>
			/// The unique identifier for variable conditionOption
			/// </summary>
			public const int conditionOption = 0x0020;
			/// <summary>
			/// The unique identifier for variable indexGroup
			/// </summary>
			public const int indexGroup = 0x0021;
			/// <summary>
			/// The unique identifier for variable Option
			/// </summary>
			public const int Option = 0x0022;
			/// <summary>
			/// The unique identifier for variable Sprite
			/// </summary>
			public const int Sprite = 0x0023;
			/// <summary>
			/// The unique identifier for variable Start
			/// </summary>
			public const int Start = 0x0024;
			/// <summary>
			/// The unique identifier for variable __axiom
			/// </summary>
			public const int __axiom = 0x002B;
		}
		/// <summary>
		/// The collection of variables matched by this parser
		/// </summary>
		/// <remarks>
		/// The variables are in an order consistent with the automaton,
		/// so that variable indices in the automaton can be used to retrieve the variables in this table
		/// </remarks>
		private static readonly Symbol[] variables = {
			new Symbol(0x0017, "operator"), 
			new Symbol(0x0018, "idOption"), 
			new Symbol(0x0019, "boolOption"), 
			new Symbol(0x001A, "stringOption"), 
			new Symbol(0x001B, "numberOption"), 
			new Symbol(0x001C, "groupOption"), 
			new Symbol(0x001D, "colourGroup"), 
			new Symbol(0x001E, "layerGroup"), 
			new Symbol(0x001F, "cultureGroup"), 
			new Symbol(0x0020, "conditionOption"), 
			new Symbol(0x0021, "indexGroup"), 
			new Symbol(0x0022, "Option"), 
			new Symbol(0x0023, "Sprite"), 
			new Symbol(0x0024, "Start"), 
			new Symbol(0x0025, "__V37"), 
			new Symbol(0x0026, "__V38"), 
			new Symbol(0x0027, "__V39"), 
			new Symbol(0x0028, "__V40"), 
			new Symbol(0x0029, "__V41"), 
			new Symbol(0x002A, "__V42"), 
			new Symbol(0x002B, "__axiom") };
		/// <summary>
		/// The collection of virtuals matched by this parser
		/// </summary>
		/// <remarks>
		/// The virtuals are in an order consistent with the automaton,
		/// so that virtual indices in the automaton can be used to retrieve the virtuals in this table
		/// </remarks>
		private static readonly Symbol[] virtuals = {
 };
		/// <summary>
		/// Initializes a new instance of the parser
		/// </summary>
		/// <param name="lexer">The input lexer</param>
		public PortraitReaderParser(PortraitReaderLexer lexer) : base (commonAutomaton, variables, virtuals, null, lexer) { }
	}
}
